/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_cases_2 (
    input clk,
    input rst,
    input s_dip,
    input cout_dip,
    input s_circuit,
    input cout_circuit,
    output reg a,
    output reg b,
    output reg cin,
    output reg [7:0] led_expected,
    output reg [7:0] led_result,
    output reg [7:0] led_case,
    input mode_dip,
    input condition_dip,
    input [4:0] io_button
  );
  
  
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  localparam ONE_state = 3'd0;
  localparam TWO_state = 3'd1;
  localparam THREE_state = 3'd2;
  localparam FOUR_state = 3'd3;
  localparam FIVE_state = 3'd4;
  localparam SIX_state = 3'd5;
  localparam SEVEN_state = 3'd6;
  localparam EIGHT_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = ONE_state;
  localparam AUTO_mode = 1'd0;
  localparam MANUAL_mode = 1'd1;
  
  reg M_mode_d, M_mode_q = AUTO_mode;
  localparam DIP_condition = 1'd0;
  localparam CIRCUIT_condition = 1'd1;
  
  reg M_condition_d, M_condition_q = DIP_condition;
  reg [0:0] M_s_d, M_s_q = 1'h0;
  reg [0:0] M_cout_d, M_cout_q = 1'h0;
  
  always @* begin
    M_condition_d = M_condition_q;
    M_state_d = M_state_q;
    M_mode_d = M_mode_q;
    M_s_d = M_s_q;
    M_counter_d = M_counter_q;
    M_cout_d = M_cout_q;
    
    M_counter_d = M_counter_q + 1'h1;
    led_expected = 1'h0;
    led_case = 1'h0;
    led_result = 1'h0;
    a = 1'h0;
    b = 1'h0;
    cin = 1'h0;
    M_s_d = s_circuit;
    M_cout_d = cout_circuit;
    
    case (mode_dip)
      1'h0: begin
        M_mode_d = AUTO_mode;
      end
      1'h1: begin
        M_mode_d = MANUAL_mode;
      end
    endcase
    
    case (condition_dip)
      1'h0: begin
        M_condition_d = CIRCUIT_condition;
      end
      1'h1: begin
        M_condition_d = DIP_condition;
      end
    endcase
    
    case (M_condition_q)
      DIP_condition: begin
        M_s_d = s_dip;
        M_cout_d = cout_dip;
      end
      CIRCUIT_condition: begin
        M_s_d = s_circuit;
        M_cout_d = cout_circuit;
      end
    endcase
    
    case (M_mode_q)
      AUTO_mode: begin
        
        case (M_state_q)
          ONE_state: begin
            led_expected = 8'h00;
            led_case = 8'h80;
            a = 1'h0;
            b = 1'h0;
            cin = 1'h0;
            if (M_s_q == 1'h0 && M_cout_q == 1'h0) begin
              led_result = 8'h80;
              if (M_counter_q[27+0-:1] == 1'h1) begin
                M_state_d = TWO_state;
              end
            end
          end
          TWO_state: begin
            led_expected = 8'h22;
            led_case = 8'h40;
            a = 1'h0;
            b = 1'h0;
            cin = 1'h1;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h40;
              if (M_counter_q[27+0-:1] == 1'h0) begin
                M_state_d = THREE_state;
              end
            end
          end
          THREE_state: begin
            led_expected = 8'h42;
            led_case = 8'h20;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h0;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h20;
              if (M_counter_q[27+0-:1] == 1'h1) begin
                M_state_d = FOUR_state;
              end
            end
          end
          FOUR_state: begin
            led_expected = 8'h61;
            led_case = 8'h10;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h1;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h10;
              if (M_counter_q[27+0-:1] == 1'h0) begin
                M_state_d = FIVE_state;
              end
            end
          end
          FIVE_state: begin
            led_expected = 8'h82;
            led_case = 8'h08;
            a = 1'h1;
            b = 1'h0;
            cin = 1'h0;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h08;
              if (M_counter_q[27+0-:1] == 1'h1) begin
                M_state_d = SIX_state;
              end
            end
          end
          SIX_state: begin
            led_expected = 8'ha1;
            led_case = 8'h04;
            a = 1'h1;
            b = 1'h0;
            cin = 1'h1;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h04;
              if (M_counter_q[27+0-:1] == 1'h0) begin
                M_state_d = SEVEN_state;
              end
            end
          end
          SEVEN_state: begin
            led_expected = 8'hc1;
            led_case = 8'h02;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h0;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h02;
              if (M_counter_q[27+0-:1] == 1'h1) begin
                M_state_d = EIGHT_state;
              end
            end
          end
          EIGHT_state: begin
            led_expected = 8'he3;
            led_case = 8'h01;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h1;
            if (M_s_q == 1'h1 && M_cout_q == 1'h1) begin
              led_result = 8'h01;
              if (M_counter_q[27+0-:1] == 1'h0) begin
                M_state_d = ONE_state;
              end
            end
          end
        endcase
      end
      MANUAL_mode: begin
        
        case (M_state_q)
          ONE_state: begin
            led_expected = 8'h00;
            led_case = 8'h80;
            a = 1'h0;
            b = 1'h0;
            cin = 1'h0;
            if (M_s_q == 1'h0 && M_cout_q == 1'h0) begin
              led_result = 8'h80;
            end
            if (M_counter_q[27+0-:1] == 1'h1) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = TWO_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = EIGHT_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          TWO_state: begin
            led_expected = 8'h22;
            led_case = 8'h40;
            a = 1'h0;
            b = 1'h0;
            cin = 1'h1;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h40;
            end
            if (M_counter_q[27+0-:1] == 1'h0) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = THREE_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = ONE_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          THREE_state: begin
            led_expected = 8'h42;
            led_case = 8'h20;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h0;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h20;
            end
            if (M_counter_q[27+0-:1] == 1'h1) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = FOUR_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = TWO_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          FOUR_state: begin
            led_expected = 8'h61;
            led_case = 8'h10;
            a = 1'h0;
            b = 1'h1;
            cin = 1'h1;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h10;
            end
            if (M_counter_q[27+0-:1] == 1'h0) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = FIVE_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = THREE_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          FIVE_state: begin
            led_expected = 8'h82;
            led_case = 8'h08;
            a = 1'h1;
            b = 1'h0;
            cin = 1'h0;
            if (M_s_q == 1'h1 && M_cout_q == 1'h0) begin
              led_result = 8'h08;
            end
            if (M_counter_q[27+0-:1] == 1'h1) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = SIX_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = FOUR_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          SIX_state: begin
            led_expected = 8'h51;
            led_case = 8'h04;
            a = 1'h1;
            b = 1'h0;
            cin = 1'h1;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h04;
            end
            if (M_counter_q[27+0-:1] == 1'h0) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = SEVEN_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = FIVE_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          SEVEN_state: begin
            led_expected = 8'hc1;
            led_case = 8'h02;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h0;
            if (M_s_q == 1'h0 && M_cout_q == 1'h1) begin
              led_result = 8'h02;
            end
            if (M_counter_q[27+0-:1] == 1'h1) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = EIGHT_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = SIX_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
          EIGHT_state: begin
            led_expected = 8'he3;
            led_case = 8'h01;
            a = 1'h1;
            b = 1'h1;
            cin = 1'h1;
            if (M_s_q == 1'h1 && M_cout_q == 1'h1) begin
              led_result = 8'h01;
            end
            if (M_counter_q[27+0-:1] == 1'h0) begin
              if (io_button[4+0-:1] == 1'h1) begin
                M_state_d = ONE_state;
              end else begin
                if (io_button[3+0-:1] == 1'h1) begin
                  M_state_d = SEVEN_state;
                end else begin
                  if (io_button[0+0-:1] == 1'h1) begin
                    M_state_d = ONE_state;
                  end else begin
                    if (io_button[2+0-:1] == 1'h1) begin
                      M_state_d = EIGHT_state;
                    end
                  end
                end
              end
            end
          end
        endcase
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_s_q <= 1'h0;
      M_cout_q <= 1'h0;
      M_state_q <= 1'h0;
      M_mode_q <= 1'h0;
      M_condition_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_s_q <= M_s_d;
      M_cout_q <= M_cout_d;
      M_state_q <= M_state_d;
      M_mode_q <= M_mode_d;
      M_condition_q <= M_condition_d;
    end
  end
  
endmodule
